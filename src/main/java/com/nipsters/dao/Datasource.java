package com.nipsters.dao;

import java.sql.Statement;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class Datasource {
    
    /*
        SQLs para inicialização
    */
    private static final String SQL_TABLE_COLLABORATORS = "CREATE TEXT TABLE IF NOT EXISTS collaborators ( "
    +"id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1), "
    +"name VARCHAR(50) NOT NULL, "
    +"genre TINYINT NOT NULL, "
    +"birth DATE NOT NULL, "
    +"function VARCHAR(30) NOT NULL, "
    +"sector VARCHAR(30) NOT NULL, "
    +"PRIMARY KEY (id, name));";
    private static final String SQL_TABLE_ASO = "CREATE TEXT TABLE IF NOT EXISTS asos ( "
    +"number INT NOT NULL, "
    +"id_collaborator INT NOT NULL, "
    +"dated_to DATE NOT NULL, "
    +"type TINYINT NOT NULL, "
    +"PRIMARY KEY (number));";
    /*
        Credenciais
    */
    private String url;
    private String username;
    private String password;

    /*
        Conexão do banco de dados
    */
    private Connection connection;

    /*
        Singleton
    */
    private static Datasource instance;

    private Datasource(String url, String username, String password){
        this.url = url;
        this.username = username;
        this.password = password;

        try{
            this.startConnection();
        }catch(SQLException sqle){
            sqle.printStackTrace();
        }

        if(Files.notExists(Paths.get("./data/collaborator.txt"), LinkOption.NOFOLLOW_LINKS))
            createTables();
    }

    /* Getting instance */
    public static Datasource getInstance(){
        return instance;
    }


    /* Initializers */
    public static void init(){
        init("jdbc:hsqldb:file:./data/maso");
    }

    public static void init(String url){
        init(url, "SA", "");
    }

    public static void init(String url, String username, String password){
        if (instance == null)
            instance = new Datasource(url, username, password);
    }

    /* Getting connection */
    public Connection getConnection(){
        return this.connection;
    }


    /* DB creators */
    private void createTables(){
        Statement statement = null;
        try{
            statement = this.getStatement();
            statement.executeUpdate(SQL_TABLE_COLLABORATORS);
            statement.executeUpdate(SQL_TABLE_ASO);
            statement.executeUpdate("SET TABLE asos SOURCE \"asos.txt;fs=|;quoted=false\";");
            statement.executeUpdate("SET TABLE collaborators SOURCE \"collaborators.txt;quoted=false\";");
        }catch(SQLException sqle){
            System.out.println(String.format("[ERROR: %d] - %s", sqle.getErrorCode(), sqle.getMessage()));
            sqle.printStackTrace();
        }
    }

    /* Connection controllers */
    private void startConnection() throws SQLException{
        this.connection = DriverManager.getConnection(this.url, this.username, this.password);
    }

    public void restartConnection(){
        try{
            if(!this.connection.isClosed())
                this.connection.close();
            this.startConnection();
        }catch(SQLException sqle){ instance = null; }
    }
    
    /* Statements */
    public Statement getStatement() throws SQLException{
        return this.connection.createStatement();
    }

    public PreparedStatement getPreparedStatement(String sql) throws SQLException{
        return this.connection.prepareStatement(sql);
    }
}